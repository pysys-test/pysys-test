# This workflow is for building and testing the PySys framewrok itself. 
# If you're looking for something to copy to test your own projects look at the sample projects instead.

name: PySys

on:
  push:
    branches:
      # Run tests on the main branches only; for running tests on feature branches, use pull requests
      - "main"
      - "release"
      - "doc-updates"
    
  pull_request:
    branches:
      - "main"

  workflow_dispatch: # also allow manually invoking this

  # When a new (empty, non-draft) release is created via the GitHub UI, uploads the files to that release, upload it to PyPi 
  # and upload the doc to GitHub pages. Only do this when all the tests are passing. 
  # Requires defining secrets PYPI_USERNAME and PYPI_PASSWORD with your PyPi credentials. 
  release:
    types:
      - created

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      # Disable fail fast since it's useful to see test results for all platforms even if some failed
      fail-fast: false
      
      matrix:
        # A selection range of OS, Python and Java versions
        include:
          # # Future: run with the free-threaded (GIL disable-able) build of the latest version
          # - test-run-id: lnx-py3.13
          #   os: ubuntu-latest
          #   python-version: "3.13"

          # # NB: Although we normally build doc on the latest version, we can't build doc on 3.13+ until we also upgrade Sphinx to 6.2+
          # - test-run-id: lnx-py3.12-doc-deploy
          #   os: ubuntu-latest
          #   python-version: "3.12"
          #   doc-and-deploy: true

          - test-run-id: mac-py3.9
            os: macos-latest
            python-version: "3.9"

          - test-run-id: macos13
            os: macos-13
            python-version: "3.9"

          # - test-run-id: win-py3.9
          #   os: windows-latest
          #   python-version: "3.9"

          # - test-run-id: win-py3.13
          #   os: windows-latest
          #   python-version: "3.13"

          # --- Additional testing combinations

          #- test-run-id: mac-py3.9
          #  os: macos-latest
          #  python-version: "3.9"

          #- test-run-id: lnx-py3.9
          #  os: ubuntu-latest
          #  python-version: "3.9"

          #- test-run-id: lnx-py3.10
          #  os: ubuntu-latest
          #  python-version: "3.10"
          
          #- test-run-id: lnx-py3.10
          #  os: ubuntu-latest
          #  python-version: "3.10"

    runs-on: ${{matrix.os}}
    
    steps:
      - uses: actions/checkout@v4
      
      # Install Python and dependencies
      - name: Configure Python dependency requirements
        run: |
          echo build           > setup-python-package-requirements.txt
          echo setuptools      >> setup-python-package-requirements.txt
          echo wheel           >> setup-python-package-requirements.txt
          echo coverage        >> setup-python-package-requirements.txt
      - uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.python-version}}
          cache: pip
          cache-dependency-path: setup-python-package-requirements.txt
      - run: pip install -r setup-python-package-requirements.txt
      - run: echo PYSYS_VERSION=`cat VERSION` >> $GITHUB_ENV
        shell: bash

      - name: Pre-build deployment tailoring
        if: matrix.doc-and-deploy
        shell: bash
        run: |
             mkdir dist

             # Install to-dos (for line endings)
             #sudo apt-get update
             sudo apt-get install tofrodos

             # pre-process module file to include current date, which also goes into the HTML doc
             sed -i "s/__date__ = .*/__date__ = \"`date --iso-8601`\"/g" "pysys/__init__.py"
             echo Build date:
             grep "__date__" "pysys/__init__.py"

             # create sample tests directory with both windows and linux line endings; leave it with windows endings so testing shows up any issues
             echo --- Preparing PySys sample zip archives
             cd samples
             # copy everything - use . instead of * to avoid missing the hidden directories such as .github
             cp -R common-files/. getting-started/
             cp -R common-files/. cookbook/
             tar -czf ../dist/PySys-$PYSYS_VERSION-samples-unix.tar.gz getting-started cookbook

             # don't change the .sh script since we need it to be executable
             find . -type f -not -name "*.sh" | xargs todos
             zip -r --quiet ../dist/PySys-$PYSYS_VERSION-samples-win.zip getting-started cookbook
       
      - name: Build PySys
        shell: bash
        run: |
          # build universal wheel and python source distribution
          python -m build

      - name: Install PySys
        shell: bash
        run: |
          ls -l dist
          # use wildcard since the capitalization PySys in the .whl varies between Python versions
          python -m pip install --no-cache-dir dist/*.whl
      
      - name: Tests
        shell: bash
        working-directory: test
        id: pysys
        run: |
          export PYTHONWARNINGS=error
          # For tests running in 3.13+, disable the GIL to check that this works
          # TODO: use the "t" executable, and export PYTHON_GIL=0
          
          # This is necessary to avoid earlier bytecode writing from stopping PYTHONWARNINGS=error set in individual tests 
          # from working
          export PYTHONDONTWRITEBYTECODE=true
          find . -name __pycache__ -prune -exec rm  -rf '{}' \;

          pysys.py --help

          python ../scripts/pysys.py run -XpythonCoverage --ci --outdir main --printLogs ALL 092 -c10 -vDEBUG

      - name: Upload archive artifacts for any test failures
        uses: actions/upload-artifact@v4
        if: always() && steps.pysys.outputs.artifact_TestOutputArchiveDir

        with:
          name: pysys_output_${{matrix.test-run-id}}
          path: ${{ steps.pysys.outputs.artifact_TestOutputArchiveDir }}
